---
import type { GetStaticPaths } from 'astro';
import type { Language, TargetableDocument, TargetableDocumentType } from '@root/sanity/sanity.types';
import { LOCALE_PREFIXES } from '@lib/routingUtils';
import sanityClient from '@root/sanity/sanity.cli';
import { getContent, getSlug, getSummary, groupByLanguageField, groupByLocalisedSlug } from '@lib/contentUtils';
import { DOCUMENT_TYPE_PATHS } from '@lib/routingUtils';
import Layout from '@layouts/Layout.astro';
import { getTitle, getDate } from '@lib/contentUtils';
import { renderIsoDate } from '@lib/dateTimeUtils';
import PageContent from '@components/PageContent.astro';

export const getStaticPaths: GetStaticPaths = async () => {
    const documentTypes: TargetableDocumentType[] = ['project', 'writing', 'happening', 'resource'];
    const languages: Language[] = Object.keys(LOCALE_PREFIXES) as Language[];
    const paths: { params: Record<string, string>, props: Record<string, any> }[] = [];
    for (const documentType of documentTypes) {
        const baseQueryFields = [
            '_type',
            'language',
            'title',
            'slug',
            'date',
            'summary',
            'mainImage',
            'content',
        ];
        if (documentType === 'happening') {
            baseQueryFields.push(
                'startDate',
                'startTime',
                'timezone',
                'location',
            );
        }
        const queryFields = baseQueryFields.join(', ');
        const documents: TargetableDocument[] = await sanityClient.fetch(`
            *[_type == '${documentType}' && defined(slug)] {
                ${queryFields}
            }
        `);
        const isSlugLocalised = documents.length > 0
            && typeof documents[0].slug === 'object'
            && !('current' in documents[0].slug);
        for (const lang of languages) {
            const localisedDocs = isSlugLocalised
                ? groupByLocalisedSlug(documents, lang)
                : groupByLanguageField(documents, lang);
            for (const doc of localisedDocs) {
                const slug = getSlug(doc.slug, lang);
                if (!slug) { continue; }
                paths.push({
                    params: {
                        locale: LOCALE_PREFIXES[lang],
                        collection: DOCUMENT_TYPE_PATHS[documentType],
                        slug: slug,
                    },
                    props: {
                        lang: lang,
                        doc: doc,
                    },
                });
            }
        }
    }
    return paths;
};

type Props = {
    lang: Language;
    doc: TargetableDocument;
};

const {
    lang,
    doc,
} = Astro.props;

const resolvedTitle = getTitle(doc, lang);
const resolvedDescription = getSummary(doc.summary, lang);
const resolvedImage = doc.mainImage;
const resolvedDate = getDate(doc);
const resolvedContent = getContent(doc.content, lang);
---

<Layout
    lang={lang}
    title={resolvedTitle}
    description={resolvedDescription}
    image={resolvedImage}
>
    {resolvedTitle && (
        <h2>{resolvedTitle}</h2>
    )}
    {resolvedDate && (
        <time datetime={resolvedDate}>
            {renderIsoDate(resolvedDate)}
        </time>
    )}
    {resolvedContent && (
        <PageContent source={resolvedContent} lang={lang} />
    )}
</Layout>