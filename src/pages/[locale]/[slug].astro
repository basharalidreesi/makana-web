---
import type { GetStaticPaths } from 'astro';
import type { Language, StaticDocument, StaticDocumentType } from '@root/sanity/sanity.types';
import { SUPPORTED_LANGUAGES_IDS, SUPPORTED_LANGUAGES_RECORD } from '@lib/languageUtils';
import { definedLocalisedSlug, RESOLVED_CONTENT_QUERY } from '@lib/groqUtils';
import sanityClient from '@root/sanity/sanity.cli';
import { getAlternates, getContent, getSlug, getTextLength, getTitle, groupByLocalisedSlug } from '@lib/contentUtils';
import { registerId } from '@lib/registry';
import { generateRoute, LOCALE_PREFIXES } from '@lib/routingUtils';
import Layout from '@layouts/Layout.astro';
import PageContent from '@components/PageContent.astro';

export const getStaticPaths: GetStaticPaths = async () => {
    const documentTypes: StaticDocumentType[] = ['aboutPage'];
    const languages: Language[] = SUPPORTED_LANGUAGES_IDS as Language[];
    const paths: { params: Record<string, string>, props: Record<string, any> }[] = [];
    for (const documentType of documentTypes) {
        const baseQueryFields = [
            '_id',
            '_type',
            'title',
            'slug',
            RESOLVED_CONTENT_QUERY,
        ];
        const queryFields = baseQueryFields.join(', ');
        const documents: StaticDocument[] = await sanityClient.fetch(`
            *[_type == '${documentType}' && (${definedLocalisedSlug})] {
                ${queryFields}
            }
        `);
        for (const lang of languages) {
            const localisedDocs = groupByLocalisedSlug(documents, lang);
            if (!Array.isArray(localisedDocs) || localisedDocs.length === 0) continue;
            for (const doc of localisedDocs) {
                const slug = getSlug(doc, lang);
                const title = getTitle(doc, lang);
                const route = generateRoute(doc, lang);
                if (!slug || !route) continue;
                const locale = LOCALE_PREFIXES[lang];
                registerId(
                    doc._id,
                    lang,
                    doc._type,
                    slug,
                    route,
                    title,
                );
                paths.push({
                    params: {
                        locale: locale,
                        slug: slug,
                    },
                    props: {
                        lang: lang,
                        doc: doc,
                    },
                });
            }
        }
    }
    return paths;
};

type Props = {
    lang: Language;
    doc: StaticDocument;
};

const {
    lang,
    doc,
} = Astro.props;

const resolvedTitle = getTitle(doc, lang);
const resolvedContent = getContent(doc, lang);
const resolvedTextLength = getTextLength(doc, lang);
const resolvedAlternates = getAlternates(doc, lang);
---

<Layout
    lang={lang}
    dir={SUPPORTED_LANGUAGES_RECORD[lang].dir}
    title={resolvedTitle}
    mode={{
        name: 'windowed',
        type: doc._type,
        textLength: resolvedTextLength,
    }}
    alternates={resolvedAlternates}
>
    {resolvedTitle && (
        <div class='content-header'>
            <h2>
                <bdi>{resolvedTitle}</bdi>
            </h2>
            <time>
                <bdi>00_00_0000</bdi>
            </time>
        </div>
    )}
    {resolvedContent && (
        <PageContent source={resolvedContent} lang={lang} />
    )}
</Layout>