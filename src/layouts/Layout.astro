---
import sanityClient from '@root/sanity/sanity.cli';
import type { AboutPage, Happening, Project, Resource, Website, Writing, Language, SanityImage, HomePage } from '@root/sanity/sanity.types';
import { definedLocalisedSlug } from '@lib/groqUtils';
import { type AlternateDocument } from '@lib/contentUtils';
import { DEFAULT_LANGUAGE_ID, UI_DICTIONARY } from '@lib/languageUtils';
import { generateOgImageUrl } from '@lib/imageUtils';
import { ClientRouter } from 'astro:transitions';
import LogoBar from '@components/LogoBar.astro';
import NavigationBar from '@components/NavigationBar.astro';
import FeaturedBar from '@components/FeaturedBar.astro';
import '@styles/reset.css';
import '@styles/fonts.css';

type CustomDataFile = {
  default: string;
};

const fontFiles = Object.values<CustomDataFile>(
    import.meta.glob('../../public/fonts/*.woff', { eager: true })
);

const websiteSettings: (Website & { logoUrl: string | undefined; }) | undefined = await sanityClient.fetch(`
    *[_id == 'website'][0] {
        _type,
        title,
        summary,
        keywords,
        mainImage,
        analytics,
        'logoUrl': logo.asset->url
    }
`);

const homePage: HomePage | undefined = await sanityClient.fetch(`
    *[_id == 'homePage' && (defined(featuredItems))][0] {
        featuredItems[] -> {
            _id,
            _type,
            title,
            slug,
            mainImage
        }
    }
`);

const aboutPage: AboutPage | undefined = await sanityClient.fetch(`
    *[_id == 'aboutPage' && (${definedLocalisedSlug})][0] {
        _type,
        title,
        slug
    }
`);

const projects: Project[] | undefined = await sanityClient.fetch(`
    *[_type == 'project' && (${definedLocalisedSlug})] {
        _type,
        title,
        slug,
        date
    } | order(date desc, title asc)
`);

const writings: Writing[] | undefined = await sanityClient.fetch(`
    *[_type == 'writing' && (${definedLocalisedSlug})] {
        _type,
        title,
        slug,
        date
    } | order(date desc, title asc)
`);

const happenings: Happening[] | undefined = await sanityClient.fetch(`
    *[_type == 'happening' && (${definedLocalisedSlug})] {
        _type,
        title,
        slug,
        startDate,
        startTime {
            hours,
            minutes
        }
    } | order(startDate desc, startTime.hours desc, startTime.minutes desc, title asc)
`);

const resources: Resource[] | undefined = await sanityClient.fetch(`
    *[_type == 'resource' && (${definedLocalisedSlug})] {
        _type,
        title,
        slug,
        date
    } | order(date desc, title asc)
`);

type Props = {
    lang: Language | undefined;
    title: string | undefined;
    description?: string | undefined;
    keywords?: Array<string> | undefined;
    image?: SanityImage | undefined;
    canonical?: string | undefined;
    analytics?: string | undefined;
    alternates?: AlternateDocument[] | undefined;
};

const {
    lang = DEFAULT_LANGUAGE_ID,
    title,
    description,
    keywords,
    image,
    canonical,
    analytics,
    alternates,
} = Astro.props;

const websiteTitle = websiteSettings?.title?.[lang] || UI_DICTIONARY.websiteTitle[lang];
const pageTitle = title;

const resolvedTitle = [pageTitle, websiteTitle].filter(Boolean).join(' Â· ');
const resolvedDescription = description || websiteSettings?.summary?.[lang];
const resolvedKeywords = [...(keywords || []), ...(websiteSettings?.keywords || [])].join(', ');
const resolvedImage = image?.asset ? generateOgImageUrl(image) : websiteSettings?.mainImage?.asset ? generateOgImageUrl(websiteSettings?.mainImage) : undefined;
const resolvedCanonical = canonical || new URL(Astro.url.pathname, Astro.site);
const resolvedAnalytics = analytics || websiteSettings?.analytics;
const resolvedFeaturedItems = (homePage?.featuredItems || []).filter((item) => Object.values(item.slug || {}).some((langObj) => langObj && typeof langObj.current === 'string'));
---

<html lang={lang} transition:animate='none'>
    <head>
        <meta charset='utf-8' />
        {resolvedTitle && (
            <title>{resolvedTitle}</title>
        )}
        {(pageTitle || websiteTitle) && (
            <meta property='og:site_name' content={websiteTitle} />
            <meta property='og:title' content={pageTitle || websiteTitle} />
            <meta name='twitter:title' content={pageTitle || websiteTitle} />
        )}
        {resolvedDescription && (
            <meta name='description' content={resolvedDescription} />
            <meta property='og:description' content={resolvedDescription} />
            <meta name='twitter:description' content={resolvedDescription} />
        )}
        {resolvedKeywords && (
            <meta name='keywords' content={resolvedKeywords} />
        )}
        {resolvedImage && (
            <meta property='og:image' content={resolvedImage} />
            <meta name='twitter:image' content={resolvedImage} />
        )}
        {resolvedCanonical && (
            <link rel='canonical' href={resolvedCanonical} />
            <meta property='og:url' content={resolvedCanonical} />
            <meta name='twitter:url' content={resolvedCanonical} />
        )}
        {Array.isArray(alternates) && alternates.length > 0 && alternates.map((alternate) => {
            const altUrl = new URL(alternate.route, Astro.site);
            const altLang = alternate.lang;
            if (!altUrl || !altLang) return;
            return (
                <link rel='alternate' href={altUrl} hreflang={altLang} />
            );
        })}
        <meta property='og:type' content='website' />
        <meta name='twitter:card' content='summary_large_image' />
        <meta name='viewport' content='width=device-width,initial-scale=1.0,viewport-fit=cover' />
        <meta name='robots' content='max-snippet:-1,max-image-preview:large,max-video-preview:-1' />
        <link rel='sitemap' href='/sitemap-index.xml' />
        {Array.isArray(fontFiles) && fontFiles.length > 0 && fontFiles.map((fontFile) => (
            <link rel='preload' href={fontFile.default.replace('/public', '')} as='font' type='font/woff' crossorigin='anonymous' />
        ))}
        {resolvedAnalytics && (
            <Fragment set:html={resolvedAnalytics} />
        )}
        <meta name='generator' content={Astro.generator} />
        <ClientRouter />
    </head>
    <body>
        <header>
            <h1 class='sr-only'>
                {websiteTitle}
            </h1>
            <LogoBar
                lang={lang}
                websiteSettings={websiteSettings}
            />
            <NavigationBar
                lang={lang}
                currentPath={Astro.url.pathname}
                items={{
                    aboutPage: aboutPage,
                    projects: projects,
                    writings: writings,
                    happenings: happenings,
                    resources: resources,
                }}
                transition:persist
            />
            <!-- <FeaturedBar
                lang={lang}
                items={resolvedFeaturedItems}
            /> -->
        </header>
        <main>
            <slot />
        </main>
    </body>
</html>

<script>
    // TODO initiate skeletons
    document.addEventListener('astro:before-preparation', () => {
        console.log('now');
    });
</script>

<style lang='scss'>
    @use '@styles/mixins.scss';
    :global(.sr-only:not(:focus):not(:active)) {
        @include mixins.visually-hidden;
    }

    :root {
        // text
        --font-size: 18px;
        --font-family: 'IBMPS', 'Helvetica Neue', 'Arial', sans-serif;
    }
    :root {
        // page
        --page-background-colour: #fff;
        // navigation menu
        --navigation-menu-background-colour: #fff;
        --navigation-submenu-background-colour: #fff;
        // text
        --text-default-colour: #000;
        --text-light-colour: #555;
        --text-disabled-colour: #b7b7b7;
        --text-link-hover-colour: #808080;
        --text-link-underline-colour: #666;
        --blockquote-indentation-line-colour: #3A3A3A;
        // windowed content
        --windowed-content-outline-colour: #707070;
        --windowed-content-backdrop-colour: #000;
        --windowed-content-backdrop-opacity: 0.22;
        --windowed-content-orb-colour: #fff;
        --windowed-content-aboutPage-background-colour: #aeeb9b;
        --windowed-content-project-background-colour: #fff;
        --windowed-content-writing-background-colour: #fff;
        --windowed-content-happening-background-colour: #fff500;
        --windowed-content-resource-background-colour: #ff7d57;
        // forms
        --form-field-outline-colour: #b7b7b7;
        --form-field-background-default-colour: #fff;
        --form-field-background-hover-colour: #f5f5f5;
        --form-button-background-colour: #fff;
    }
    :root {
        // page
        --page-padding-top: 2.5rem;
        --page-padding-bottom: 2.5rem;
        --page-padding-inline: calc(env(safe-area-inset-left, 0px) + 2.5rem);
        // logo
        --logo-height: 3.5rem;
        // navigation menu
        --menu-item-padding-block: 0.666rem;
        --menu-item-height: calc(1lh + (var(--menu-item-padding-block) * 2) + 1px);
        --navigation-submenu-indent-inline-start: 10rem;
        --navigation-submenu-indent-inline-end: 10rem;
        --navigation-submenu-date-title-gap: 4rem;
        // windowed content
        --small-windowed-content-max-width: 37.5rem;
        --big-windowed-content-max-width: 47.5rem;
        --windowed-content-indent-inline-start: 10rem;
        --windowed-content-indent-inline-end: 0px;
        --windowed-content-padding-top: 1.5rem;
        --windowed-content-padding-bottom: 2.5rem;
        --windowed-content-padding-inline: 2.5rem;
        --windowed-content-container-extra-padding-top: 0px;
        --windowed-content-container-extra-padding-bottom: 0px;
        --windowed-content-container-extra-padding-inline: 0px;
        --windowed-content-orb-width: 2.5rem;
        --windowed-content-orb-padding: 0.25rem;
        // featured items
        --featured-items-gap: 2rem;
        --featured-item-max-width: 25rem;
        --featured-item-padding-top: 1.5rem;
        --featured-item-padding-bottom: 1.25rem;
        --featured-item-padding-inline: 1.5rem;
        --featured-item-image-aspect-ratio: 3/2;
    }
    :root {
        @media (max-width: 1152px) {
            // windowed content
            --big-windowed-content-max-width: 42.5rem;
            // featured items
                // --featured-items-gap: 1.5rem;
                // --featured-item-width: 20rem;
                // --featured-item-padding-top: 1.25rem;
                // --featured-item-padding-bottom: 1rem;
                // --featured-item-padding-inline: 1.25rem;
                // --featured-item-image-aspect-ratio: 4/3;
        }
        @media (max-width: 1024px) {
            // navigation menu
            --navigation-submenu-indent-inline-start: 7.5rem;
            --navigation-submenu-indent-inline-end: 7.5rem;
            --windowed-content-indent-inline-start: 7.5rem;
            --navigation-submenu-date-title-gap: 1.5rem;
            // windowed content
            --big-windowed-content-max-width: 37.5rem;
            // featured items
                // --featured-item-image-aspect-ratio: 3/2;
        }
        @media (max-width: 896px) {
            // windowed content
            --small-windowed-content-max-width: 31.25rem;
            --big-windowed-content-max-width: 31.25rem;
        }
        @media (max-width: 768px) {
            // text
            --font-size: 16px;
            // windowed content
            --windowed-content-indent-inline-start: auto;
            --windowed-content-indent-inline-end: auto;
            --windowed-content-container-extra-padding-top: 1rem;
            --windowed-content-container-extra-padding-bottom: calc(1rem + var(--logo-height));
            --windowed-content-container-extra-padding-inline: 1rem;
            --windowed-content-orb-width: 2.25rem;
        }
        @media (max-width: 640px) {
            // page
            --page-padding-top: 1.5rem;
            --page-padding-bottom: 1.5rem;
            --page-padding-inline: calc(env(safe-area-inset-left, 0px) + 1.5rem);
            // logo
            --logo-height: 2.5rem;
        }
        @media (max-width: 512px) {
            // navigation menu
            --navigation-submenu-indent-inline-start: 6.5rem;
            --navigation-submenu-indent-inline-end: 0px;
            // windowed content
            --windowed-content-padding-top: 1.5rem;
            --windowed-content-padding-bottom: 1.5rem;
            --windowed-content-padding-inline: 1.5rem;
        }
        @media (max-width: 384px) {
            // windowed content
            --windowed-content-padding-bottom: 1rem;
            --windowed-content-padding-inline: 1rem;
            --windowed-content-container-extra-padding-inline: 0.5rem;
            --windowed-content-padding-top: 1rem;
        }
        @media (max-height: 448px) {
            // page
            --page-padding-top: 1.5rem;
            --page-padding-bottom: 1.5rem;
            // logo
            --logo-height: 2rem;
        }
    }
    body {
        font-size: var(--font-size);
        background-color: var(--page-background-colour);
    }
    header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        flex-wrap: wrap;
        gap: var(--menu-item-height);
        padding-top: var(--page-padding-top);
        padding-left: var(--page-padding-inline);
        padding-right: var(--page-padding-inline);
        padding-bottom: var(--page-padding-bottom);
    }
    :global(.navigation-bar) {
        order: 1;
        flex-basis: 100%;
        margin-bottom: auto;
    }
    :global(.featured-bar) {
        order: 2;
        flex: 1;
        margin-top: auto;
    }
    :global(.logo-bar) {
        order: 3;
        margin-top: auto;
        margin-left: auto;
    }
    header {
        z-index: 1;
    }
    main {
        z-index: 3;
    }
</style>