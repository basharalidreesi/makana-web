---
import sanityClient from '@root/sanity/sanity.cli';
import type { AboutPage, Happening, Project, Resource, Website, Writing, Language, SanityImageObject } from '@root/sanity/sanity.types';
import { DEFAULT_LANGUAGE_ID, UI_DICTIONARY, SUPPORTED_LANGUAGES_ORDERED, DEFAULT_LANGUAGE_DIR } from '@lib/languageUtils';
import { generateOgImage } from '@lib/imageUtils';
import { ClientRouter } from 'astro:transitions';
import { groupByLanguageField, groupByLocalisedSlug } from '@lib/contentUtils';
import { generateRoute } from '@lib/routingUtils';
import Logo from '@components/Logo.astro';
import NavSection from '@components/NavSection.astro';
import '@styles/reset.css';
import '@styles/fonts.css';

const websiteSettings: Website & { logoUrl: string; } = await sanityClient.fetch(`
    *[_id == 'website'][0] {
        _type,
        title,
        summary,
        keywords,
        mainImage,
        analytics,
        'logoUrl': logo.asset->url
    }
`);

const aboutPage: AboutPage = await sanityClient.fetch(`
    *[_id == 'aboutPage'][0] {
        _type,
        title,
        slug
    }
`);

const projects: Project[] = await sanityClient.fetch(`
    *[_type == 'project' && defined(language) && defined(slug.current)] {
        _type,
        language,
        title,
        slug,
        date
    } | order(date desc, title asc)
`);

const writings: Writing[] = await sanityClient.fetch(`
    *[_type == 'writing' && defined(language) && defined(slug.current)] {
        _type,
        language,
        title,
        slug,
        date
    } | order(date desc, title asc)
`);

const happenings: Happening[] = await sanityClient.fetch(`
    *[_type == 'happening' && defined(slug)] {
        _type,
        title,
        slug,
        startDate,
        startTime {
            hours,
            minutes
        }
    } | order(startDate desc, startTime.hours desc, startTime.minutes desc, title asc)
`);

const resources: Resource[] = await sanityClient.fetch(`
    *[_type == 'resource' && defined(slug)] {
        _type,
        title,
        slug,
        date
    } | order(date desc, title asc)
`);

type Props = {
    lang: Language | undefined;
    dir: string;
    title: string | undefined;
    description?: string;
    keywords?: Array<string>;
    image?: SanityImageObject;
    canonical?: string;
    analytics?: string;
    mode: 'windowed' | 'flowed' | 'covering';
};

const {
    lang = DEFAULT_LANGUAGE_ID,
    dir = DEFAULT_LANGUAGE_DIR,
    title,
    description,
    keywords,
    image,
    canonical,
    analytics,
    mode,
} = Astro.props;

const websiteTitle = websiteSettings.title?.[lang];
const pageTitle = title;

const resolvedTitle = [pageTitle, websiteTitle].filter(Boolean).join(' Â· ');
const resolvedDescription = description || websiteSettings.summary?.[lang];
const resolvedKeywords = [...(keywords || []), ...(websiteSettings.keywords || [])].join(', ');
const resolvedImage = image?.asset ? generateOgImage(image) : websiteSettings.mainImage?.asset ? generateOgImage(websiteSettings.mainImage) : undefined;
const resolvedCanonical = canonical || new URL(Astro.url.pathname, Astro.site);
const resolvedAnalytics = analytics || websiteSettings.analytics;
---

<html lang={lang} transition:animate='none'>
    <head>
        <meta charset='utf-8' />
        {resolvedTitle && (
            <title>{resolvedTitle}</title>
        )}
        {(pageTitle || websiteTitle) && (
            <meta property='og:site_name' content={websiteTitle} />
            <meta property='og:title' content={pageTitle || websiteTitle} />
            <meta name='twitter:title' content={pageTitle || websiteTitle} />
        )}
        {resolvedDescription && (
            <meta name='description' content={resolvedDescription} />
            <meta property='og:description' content={resolvedDescription} />
            <meta name='twitter:description' content={resolvedDescription} />
        )}
        {resolvedKeywords && (
            <meta name='keywords' content={resolvedKeywords} />
        )}
        {resolvedImage && (
            <meta property='og:image' content={resolvedImage} />
            <meta name='twitter:image' content={resolvedImage} />
        )}
        {resolvedCanonical && (
            <link rel='canonical' href={resolvedCanonical} />
            <meta property='og:url' content={resolvedCanonical} />
            <meta name='twitter:url' content={resolvedCanonical} />
        )}
        <meta property='og:type' content='website' />
        <meta name='twitter:card' content='summary_large_image' />
        <meta name='viewport' content='width=device-width,initial-scale=1.0,viewport-fit=cover' />
        <meta name='robots' content='max-snippet:-1,max-image-preview:large,max-video-preview:-1' />
        <link rel='sitemap' href='/sitemap-index.xml' />
        {resolvedAnalytics && (
            <Fragment set:html={resolvedAnalytics} />
        )}
        <meta name='generator' content={Astro.generator} />
        <ClientRouter />
    </head>
    <body>
        <header aria-hidden={mode === 'windowed' ? 'true' : 'false'}> <!-- TODO aria-hidden and focus -->
            <h1 class='sr-only'>
                {websiteTitle}
            </h1>
            <div class='logo-bar'>
                <div>
                    <a href='/' aria-label={UI_DICTIONARY.homePage[lang]}>
                        <Logo source={websiteSettings.logoUrl} />
                    </a>
                </div>
            </div>
            <div class='navigation-bar' transition:persist>
                {SUPPORTED_LANGUAGES_ORDERED.map((supportedLang) => {
                    const langId = supportedLang.id;
                    const langDir = supportedLang.dir;
                    const langProjects = groupByLanguageField(projects, langId);
                    const langWritings = groupByLanguageField(writings, langId);
                    const langHappenings = groupByLocalisedSlug(happenings, langId);
                    const langResources = groupByLocalisedSlug(resources, langId);
                    const HOW_MANY_MENUS = 1 + 4;
                    const routeToAboutPage = aboutPage.slug?.[langId]?.current && generateRoute(aboutPage, langId);
                    return (
                        <section lang={langId} dir={langDir} data-has-expanded='false' style={`--how-many-menus: ${HOW_MANY_MENUS};`}>
                            <nav aria-label={UI_DICTIONARY.navigation[langId]}>
                                <ul class='navigation-menu'>
                                    {routeToAboutPage && (
                                        <li class='navigation-menu-item static-navigation-item'>
                                            <a href={routeToAboutPage} aria-current={routeToAboutPage === Astro.url.pathname ? 'page' : undefined}>
                                                {aboutPage.title?.[langId] || UI_DICTIONARY.aboutPage[langId]}
                                            </a>
                                        </li>
                                    )}
                                    <NavSection items={langProjects} lang={langId} title={UI_DICTIONARY.project[langId]} type={'project'} min={HOW_MANY_MENUS} />
                                    <NavSection items={langWritings} lang={langId} title={UI_DICTIONARY.writing[langId]} type={'writing'} min={HOW_MANY_MENUS} />
                                    <NavSection items={langHappenings} lang={langId} title={UI_DICTIONARY.happening[langId]} type={'happening'} min={HOW_MANY_MENUS} />
                                    <NavSection items={langResources} lang={langId} title={UI_DICTIONARY.resource[langId]} type={'resource'} min={HOW_MANY_MENUS} />
                                </ul>
                            </nav>
                        </section>
                    );
                })}
            </div>
        </header>
        <main>
            <div class={`${mode}-content-container`} dir={dir}>
                <div class={`${mode}-content small-windowed-content`} role='dialog' aria-modal='true'> <!-- TODO size determiner and dialog setup -->
                    {mode === 'windowed' && (
                        <div class='windowed-content-controls'>
                            <div class='close-windowed-content'>
                                <a href='/'>Close</a>
                            </div>
                            {/* TODO translation switcher */}
                        </div>
                    )}
                    <slot />
                </div>
            </div>
        </main>
    </body>
</html>

<script>
    // document.addEventListener('astro:before-preparation', () => {
    //     console.log('now');
    // });

    const navAnchors = document.querySelectorAll('nav a');
    navAnchors?.forEach((anchor) => { // TODO
        anchor.addEventListener('click', () => {
            const header = document.querySelector('header');
            header?.setAttribute('aria-hidden', 'true');
        });
    });

    // @ts-ignore
    if (!window.isCloseWindowedContentInitialised) {
        // @ts-ignore
        window.isCloseWindowedContentInitialised = true;
        const closeWindowedContentDirectly = () => {
            const windowedContentContainer = document.querySelector('.windowed-content-container');
            if (windowedContentContainer) {
                (windowedContentContainer as HTMLElement).style.setProperty('display', 'none');
            }
            history.pushState({}, '', '/');
            const currentNavAnchor = document.querySelector('.navigation-bar a[aria-current]');
            currentNavAnchor?.removeAttribute('aria-current');
            const header = document.querySelector('header');
            header?.setAttribute('aria-hidden', 'false'); // TODO
        }
        const attachCloseWindowedContent = () => {
            const windowedContentControlsAnchor = document.querySelector('.close-windowed-content a');
            windowedContentControlsAnchor?.addEventListener('click', (event) => {
                event.preventDefault();
                closeWindowedContentDirectly();
            }, { passive: false, once: true });
        }
        attachCloseWindowedContent();
        document.addEventListener('astro:after-swap', () => {
            attachCloseWindowedContent();
        });
        // @ts-ignore
        window.closeWindowedContentDirectly = closeWindowedContentDirectly;
    }

    // @ts-ignore
    if (!window._isNavInitialised) {
        // @ts-ignore
        window._isNavInitialised = true;
        const navExpandButtons = document.querySelectorAll('button[data-nav-expand]');
        navExpandButtons?.forEach((button) => button.addEventListener('click', () => {
            const expanded = button.getAttribute('aria-expanded') === 'true';
            const controls = button.getAttribute('aria-controls');
            if (!controls) return;
            const menu = document.getElementById(controls);
            if (!menu) return;
            const section = menu.closest('section');
            navExpandButtons.forEach((otherButton) => {
                const otherControls = otherButton.getAttribute('aria-controls') || '';
                const otherMenu = document.getElementById(otherControls);
                const otherSection = otherMenu?.closest('section');
                if (!otherControls || !otherMenu || !otherSection) return;
                if (otherButton !== button && otherMenu) {
                    otherButton.setAttribute('aria-expanded', 'false');
                    otherMenu.setAttribute('aria-hidden', 'true');
                    otherMenu.hidden = true;
                    otherSection.setAttribute('data-has-expanded', 'false');
                }
            });
            const isExpanding = !expanded;
            button.setAttribute('aria-expanded', String(isExpanding));
            menu.setAttribute('aria-hidden', String(!isExpanding));
            menu.hidden = !isExpanding;
            if (section) {
                section.setAttribute('data-has-expanded', String(isExpanding));
            }
            // @ts-ignore
            if (typeof window.closeWindowedContentDirectly === 'function') {
                // @ts-ignore
                window.closeWindowedContentDirectly();
            }
        }));
        const navAnchors = document.querySelectorAll('.navigation-bar a');
        navAnchors?.forEach((anchor) => {
            anchor.addEventListener('click', () => {
                anchor.setAttribute('aria-current', 'page');
                navAnchors.forEach((otherAnchor) => {
                    if (otherAnchor !== anchor) {
                        otherAnchor.removeAttribute('aria-current');
                    }
                });
            });
        });
    }
</script>

<style lang='scss'>
    @use '@styles/mixins.scss';
    :global(.sr-only:not(:focus):not(:active)) {
        @include mixins.visually-hidden;
    }
    :root {
        --colour-text-default: blue;
        --colour-text-link-hover: red;
        --windowed-content-background-colour: #aeeb9b;
        --windowed-content-outline-colour: #707070;
        --windowed-content-backdrop-colour: #000;
        --windowed-content-backdrop-opacity: 0.22;
        --font-size: 18px;
        --font-family: 'IBMPS', 'Helvetica Neue', 'Arial', sans-serif;
    }
    :root {
        --page-padding-top: 2.5rem;
        --page-padding-bottom: 2.5rem;
        --page-padding-inline: 2.5rem;
        --logo-height: 3.5rem;
        --menu-item-padding-block: 0.666rem;
        --menu-item-padding-inline-end: 1rem;
        --menu-item-height: calc(1lh + (var(--menu-item-padding-block) * 2) + 1px);
        --navigation-submenu-indent-inline-start: 10rem;
        --navigation-submenu-indent-inline-end: 10rem;
        --small-windowed-content-max-width: 37.5rem;
        --big-windowed-content-max-width: 47.5rem;
        --windowed-content-indent-inline-start: 10rem;
        --windowed-content-indent-inline-end: 0px;
        --windowed-content-padding-top: 0px;
        --windowed-content-padding-bottom: 2.5rem;
        --windowed-content-padding-inline: 2.5rem;
        --windowed-content-container-extra-padding-top: 0px;
        --windowed-content-container-extra-padding-bottom: 0px;
        --windowed-content-container-extra-padding-inline: 0px;
        @media (max-width: 1152px) {
            --big-windowed-content-max-width: 42.5rem;
        }
        @media (max-width: 1024px) {
            --big-windowed-content-max-width: 37.5rem;
            --navigation-submenu-indent-inline-start: 7.5rem;
            --navigation-submenu-indent-inline-end: 7.5rem;
            --windowed-content-indent-inline-start: 7.5rem;
            --font-size: 16px;
        }
        @media (max-width: 896px) {
            --small-windowed-content-max-width: 31.25rem;
            --big-windowed-content-max-width: 31.25rem;
        }
        @media (max-width: 768px) {
            // --navigation-submenu-indent-inline-start: 6.25rem;
            // --navigation-submenu-indent-inline-end: 6.25rem;
            --windowed-content-indent-inline-start: auto;
            --windowed-content-indent-inline-end: auto;
            --windowed-content-container-extra-padding-top: 1rem;
            --windowed-content-container-extra-padding-bottom: calc(1rem + var(--logo-height));
            --windowed-content-container-extra-padding-inline: 1rem;
        }
        @media (max-width: 512px) {
            --page-padding-top: 1.5rem;
            --page-padding-bottom: 1.5rem;
            --page-padding-inline: 1.5rem;
            --logo-height: 2.5rem;
            --navigation-submenu-indent-inline-start: 6.5rem;
            --navigation-submenu-indent-inline-end: 0px;
        }
        @media (max-width: 448px) {
            --windowed-content-padding-bottom: 1.5rem;
            --windowed-content-padding-inline: 1.5rem;
            --windowed-content-container-extra-padding-inline: 0.5rem;
        }
        @media (max-width: 384px) {
            --windowed-content-padding-bottom: 1rem;
            --windowed-content-padding-inline: 1rem;
        }
    }
    body {
        background-color: #fff;
        font-size: var(--font-size);
    }
    header {
        & {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            flex-direction: column-reverse;
            justify-content: space-between;
            row-gap: 2rem; /** TODO */
            padding-top: var(--page-padding-top);
            padding-left: var(--page-padding-inline);
            padding-right: var(--page-padding-inline);
            padding-bottom: var(--page-padding-bottom);
        }
        .logo-bar div {
            height: var(--logo-height);
            width: fit-content;
            margin-left: auto;
        }
        .logo-bar :global(svg) {
            display: block;
            height: 100%;
            width: auto;
            max-width: 100%;
        }
        .navigation-bar {
            display: flex;
        }
        .navigation-bar section {
            flex: 1 0 0;
        }
        :global(.navigation-bar ul,
        .navigation-bar li) {
            list-style: none;
        }
        :global(.navigation-menu) {
            background-color: #fff;
        }
        :global(.navigation-submenu) {
            position: absolute;
            top: var(--page-padding-top);
            inset-inline-start: calc(var(--page-padding-inline) + var(--navigation-submenu-indent-inline-start));
            inset-inline-end: calc(var(--page-padding-inline) + var(--navigation-submenu-indent-inline-end));
            height: calc(var(--how-many-menus) * var(--menu-item-height));
            overflow-y: auto;
            background-color: #fff;
            @include mixins.no-scrollbar;
        }
        :global(.navigation-menu-item,
        .navigation-submenu-item) {
            height: var(--menu-item-height);
            border-bottom: 1px solid;
            white-space: nowrap;
        }
        :global(.navigation-menu-item a,
        .navigation-menu-item button) {
            max-width: var(--navigation-submenu-indent-inline-start);
        }
        :global(.navigation-submenu-item a) {
            max-width: 100%;
        }
        :global(.navigation-submenu) {
            scroll-snap-type: y mandatory;
            scroll-snap-stop: normal;
            scroll-behavior: smooth;
        }
        :global(.navigation-submenu-item) {
            scroll-snap-align: end;
        }
        :global(.static-navigation-item a,
        .collection-navigation-item button) {
            display: block;
            padding-block: var(--menu-item-padding-block);
            padding-inline-end: var(--menu-item-padding-inline-end);
            width: fit-content;
            text-overflow: ellipsis;
            overflow: hidden;
        }
        // :global(.static-navigation-item a[aria-current]) {
        //     font-weight: bolder;
        // }
        :global(.collection-navigation-item button[aria-expanded='true']) {
            font-weight: bolder;
        }
        @media (any-hover: hover) {
            :global(.navigation-menu-item a:hover,
            .navigation-menu-item button:hover) {
                color: var(--colour-text-link-hover);
            }
            :global(.navigation-bar button) {
                cursor: pointer;
            }
        }
    }
    main {
        & {
            position: relative;
            pointer-events: none;
        }
        .windowed-content-container {
            padding-top: calc(var(--page-padding-top) + var(--windowed-content-container-extra-padding-top));
            padding-bottom: calc(var(--page-padding-bottom) + var(--windowed-content-container-extra-padding-bottom));
            padding-inline-start: calc(var(--page-padding-inline) + var(--windowed-content-container-extra-padding-inline));
            padding-inline-end: calc(var(--page-padding-inline) + var(--windowed-content-container-extra-padding-inline));
        }
        .windowed-content {
            height: auto;
            margin-inline-start: var(--windowed-content-indent-inline-start);
            margin-inline-end: var(--windowed-content-indent-inline-end);
            padding-top: var(--windowed-content-padding-top);
            padding-bottom: var(--windowed-content-padding-bottom);
            padding-inline: var(--windowed-content-padding-inline);
            outline: 1px solid var(--windowed-content-outline-colour);
            pointer-events: all;
            background-color: var(--windowed-content-background-colour);
        }
        .small-windowed-content {
            max-width: var(--small-windowed-content-max-width);
        }
        .big-windowed-content {
            max-width: var(--big-windowed-content-max-width);
        }
        .windowed-content-controls {}
        .close-windowed-content a::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--windowed-content-backdrop-colour);
            opacity: var(--windowed-content-backdrop-opacity);
            z-index: -1;
        }
    }
    header { z-index: 1; }
    main { z-index: 2; }
</style>