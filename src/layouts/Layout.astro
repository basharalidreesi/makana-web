---
import sanityClient from '@root/sanity/sanity.cli';
import type { AboutPage, Happening, Project, Resource, Website, Writing, Language, SanityImage, HomePage } from '@root/sanity/sanity.types';
import { definedLocalisedSlug } from '@lib/groqUtils';
import { type AlternateDocument } from '@lib/contentUtils';
import { DEFAULT_LANGUAGE_ID } from '@lib/languageUtils';
import { UI_DICTIONARY } from '@lib/uiDictionary';
import { generateOgImageUrl } from '@lib/imageUtils';
import ActionHandler from '@components/ActionHandler.astro';
import { ClientRouter } from 'astro:transitions';
import Logo from '@components/Logo.astro';
import NavigationBar from '@components/NavigationBar.astro';
import FeaturedBar from '@components/FeaturedBar.astro';
import WindowedContent from '@components/WindowedContent.astro';
import '@styles/reset.css';
import '@styles/fonts.css';
import '@styles/global.scss';

type CustomDataFile = {
  default: string;
};

const fontFiles = Object.values<CustomDataFile>(
    import.meta.glob('../../public/fonts/*.woff', { eager: true })
);

const websiteSettings: (Website & { logoUrl: string | undefined; logoAspectRatio: number | undefined; }) | undefined = await sanityClient.fetch(`
    *[_id == 'website'][0] {
        _type,
        title,
        summary,
        keywords,
        mainImage,
        analytics,
        'logoUrl': logo.asset->url,
        'logoAspectRatio': logo.asset->metadata.dimensions.aspectRatio,
    }
`);

const homePage: HomePage | undefined = await sanityClient.fetch(`
    *[_id == 'homePage' && (defined(featuredItems))][0] {
        featuredItems[] -> {
            _id,
            _type,
            title,
            slug,
            mainImage
        }
    }
`);

const aboutPage: AboutPage | undefined = await sanityClient.fetch(`
    *[_id == 'aboutPage' && (${definedLocalisedSlug})][0] {
        _type,
        title,
        slug
    }
`);

const projects: Project[] | undefined = await sanityClient.fetch(`
    *[_type == 'project' && (${definedLocalisedSlug})] {
        _type,
        title,
        slug,
        date
    } | order(date desc, title asc)
`);

const writings: Writing[] | undefined = await sanityClient.fetch(`
    *[_type == 'writing' && (${definedLocalisedSlug})] {
        _type,
        title,
        slug,
        date
    } | order(date desc, title asc)
`);

const happenings: Happening[] | undefined = await sanityClient.fetch(`
    *[_type == 'happening' && (${definedLocalisedSlug})] {
        _type,
        title,
        slug,
        startDate,
        startTime {
            hours,
            minutes
        }
    } | order(startDate desc, startTime.hours desc, startTime.minutes desc, title asc)
`);

const resources: Resource[] | undefined = await sanityClient.fetch(`
    *[_type == 'resource' && (${definedLocalisedSlug})] {
        _type,
        title,
        slug,
        date
    } | order(date desc, title asc)
`);

type Props = {
    lang: Language | undefined;
    title: string | undefined;
    description?: string | undefined;
    keywords?: Array<string> | undefined;
    image?: SanityImage | undefined;
    canonical?: string | undefined;
    analytics?: string | undefined;
    alternates?: AlternateDocument[] | undefined;
};

const {
    lang = DEFAULT_LANGUAGE_ID,
    title,
    description,
    keywords,
    image,
    canonical,
    analytics,
    alternates,
} = Astro.props;

const websiteTitle = websiteSettings?.title?.[lang] || UI_DICTIONARY.websiteTitle[lang];
const pageTitle = title;

const resolvedTitle = [pageTitle, websiteTitle].filter(Boolean).join(' Â· ');
const resolvedDescription = description || websiteSettings?.summary?.[lang];
const resolvedKeywords = [...(keywords || []), ...(websiteSettings?.keywords || [])].join(', ');
const resolvedImage = image?.asset ? generateOgImageUrl(image) : websiteSettings?.mainImage?.asset ? generateOgImageUrl(websiteSettings?.mainImage) : undefined;
const resolvedCanonical = canonical || new URL(Astro.url.pathname, Astro.site);
const resolvedAnalytics = analytics || websiteSettings?.analytics;
const resolvedFeaturedItems = (homePage?.featuredItems || []).filter((item) => Object.values(item.slug || {}).some((langObj) => langObj && typeof langObj.current === 'string'));
---

<html lang={lang} transition:animate='none'>
    <head>
        <meta charset='utf-8' />
        {resolvedTitle && (
            <title>{resolvedTitle}</title>
        )}
        {(pageTitle || websiteTitle) && (
            <meta property='og:site_name' content={websiteTitle} />
            <meta property='og:title' content={pageTitle || websiteTitle} />
            <meta name='twitter:title' content={pageTitle || websiteTitle} />
        )}
        {resolvedDescription && (
            <meta name='description' content={resolvedDescription} />
            <meta property='og:description' content={resolvedDescription} />
            <meta name='twitter:description' content={resolvedDescription} />
        )}
        {resolvedKeywords && (
            <meta name='keywords' content={resolvedKeywords} />
        )}
        {resolvedImage && (
            <meta property='og:image' content={resolvedImage} />
            <meta name='twitter:image' content={resolvedImage} />
        )}
        {resolvedCanonical && (
            <link rel='canonical' href={resolvedCanonical} />
            <meta property='og:url' content={resolvedCanonical} />
            <meta name='twitter:url' content={resolvedCanonical} />
        )}
        {Array.isArray(alternates) && alternates.length > 0 && alternates.map((alternate) => {
            const altUrl = new URL(alternate.route, Astro.site);
            const altLang = alternate.lang;
            if (!altUrl || !altLang) return;
            return (
                <link rel='alternate' href={altUrl} hreflang={altLang} />
            );
        })}
        <meta property='og:type' content='website' />
        <meta name='twitter:card' content='summary_large_image' />
        <meta name='viewport' content='width=device-width,initial-scale=1.0,viewport-fit=cover' />
        <meta name='robots' content='max-snippet:-1,max-image-preview:large,max-video-preview:-1' />
        <link rel='sitemap' href='/sitemap-index.xml' />
        {Array.isArray(fontFiles) && fontFiles.length > 0 && fontFiles.map((fontFile) => (
            <link rel='preload' href={fontFile.default.replace('/public', '')} as='font' type='font/woff' crossorigin='anonymous' />
        ))}
        {resolvedAnalytics && (
            <Fragment set:html={resolvedAnalytics} />
        )}
        <meta name='generator' content={Astro.generator} />
        <ActionHandler />
        <ClientRouter />
    </head>
    <body>
        <div class='logo-bar'>
            <Logo lang={lang} websiteSettings={websiteSettings} />
        </div>
        <header>
            <h1 class='sr-only'>
                {websiteTitle}
            </h1>
            <NavigationBar
                lang={lang}
                currentPath={Astro.url.pathname}
                items={{
                    aboutPage: aboutPage,
                    projects: projects,
                    writings: writings,
                    happenings: happenings,
                    resources: resources,
                }}
                transition:persist
            />
            <!-- <FeaturedBar
                lang={lang}
                items={resolvedFeaturedItems}
            /> -->
        </header>
        <main>
            <slot />
        </main>
    </body>
    <template id='windowed-content-template'>
        <WindowedContent
            skeleton={true}
            lang={undefined}
            title={undefined}
        />
    </template>
</html>

<style lang='scss'>
    html {
        overscroll-behavior: none;
        touch-action: manipulation;
    }
    body {
        font-size: var(--font-size);
        background-color: var(--page-background-colour);
    }
    header {
        z-index: 1;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        flex-direction: column;
        row-gap: var(--page-gap);
        padding-top: var(--page-padding-top);
        padding-left: var(--page-padding-inline);
        padding-right: var(--page-padding-inline);
        padding-bottom: var(--page-padding-bottom);
    }
    .logo-bar {
        z-index: 3;
        position: fixed;
        bottom: var(--page-padding-bottom);
        right: var(--page-padding-inline);
    }
</style>