---
import type { AnyContentDocumentType, Language } from '@root/sanity/sanity.types';
import type { AlternateDocument } from '@lib/contentUtils';
import { DEFAULT_LANGUAGE_ID, SUPPORTED_LANGUAGES_RECORD } from '@lib/languageUtils';
import { UI_DICTIONARY } from '@lib/uiDictionary';

type Props = {
    skeleton?: boolean;
    lang: Language | undefined;
    title: string | undefined;
    type?: AnyContentDocumentType | undefined;
    textLength?: number | undefined;
    alternates?: AlternateDocument[] | undefined;
    exitPathname: string | undefined;
};

const {
    skeleton = false,
    lang = DEFAULT_LANGUAGE_ID,
    title,
    type = 'default',
    textLength = 0,
    alternates,
    exitPathname,
} = Astro.props;

const resolvedSize = textLength >= 1500 ? 'big' : 'small';
---

<div class='windowed-content-container' id={skeleton ? 'windowed-content-skeleton-container' : 'windowed-content-container'} dir={SUPPORTED_LANGUAGES_RECORD[lang].dir}>
    <div class=`windowed-content ${type}-windowed-content ${resolvedSize}-windowed-content`>
        <div class='windowed-content-orbs'>
            {!skeleton && Array.isArray(alternates) && alternates.length > 0 && alternates.map((alternate) => {
                const altRoute = alternate.route;
                const altLang = alternate.lang;
                if (!altRoute || !altLang) return;
                return (
                    <div class='windowed-content-orb switch-content-language'>
                        <a
                            href={altRoute}
                            title={UI_DICTIONARY.languageSwitchLabel[altLang]}
                            aria-label={UI_DICTIONARY.languageSwitchLabel[altLang]}
                            data-action='open-windowed-content'
                            data-action-target-lang={altLang}
                            data-action-target-type={alternate.type}
                            data-action-target-pathname={altRoute}
                        >
                            <Fragment set:html={UI_DICTIONARY.languageSwitchSymbol[altLang]} />
                        </a>
                    </div>
                ); // previously `replace-windowed-content-with-skeleton`
            })}
            <div class='windowed-content-orb close-windowed-content'>
                <a
                    href={skeleton ? undefined : exitPathname ?? undefined}
                    title={UI_DICTIONARY.closeButtonLabel[lang]}
                    aria-label={UI_DICTIONARY.closeButtonLabel[lang]}
                    data-action='close-windowed-content'
                    data-action-target-pathname={skeleton ? undefined : exitPathname ?? undefined}
                    data-action-prevent-default='true'
                >
                    <Fragment set:html={UI_DICTIONARY.closeButtonSymbol} />
                </a>
            </div>
        </div>
        <div class='windowed-content-header'>
            {skeleton ? (
                <div class='skeleton skeleton-title'></div>
                <div class='skeleton skeleton-subtitle'></div>
            ) : (
                <h2>
                    <bdi>{title || UI_DICTIONARY.untitledLabel[lang]}</bdi>
                </h2>
                <slot name='in-header' />
            )}
        </div>
        <div class='content'>
            {skeleton ? (
                <div class='skeleton skeleton-text'></div>
                <div class='skeleton skeleton-text'></div>
                <div class='skeleton skeleton-text'></div>
                <div class='skeleton skeleton-text'></div>
            ) : (
                <slot />
            )}
        </div>
    </div>
</div>

<style lang='scss'>
    .windowed-content-container {
        z-index: 4;
        position: relative;
        pointer-events: none;
        padding-top: calc(var(--page-padding-top) + var(--windowed-content-container-extra-padding-top));
        padding-bottom: calc(var(--page-padding-bottom) + var(--windowed-content-container-extra-padding-bottom));
        padding-inline-start: calc(var(--page-padding-inline) + var(--windowed-content-container-extra-padding-inline));
        padding-inline-end: calc(var(--page-padding-inline) + var(--windowed-content-container-extra-padding-inline));
    }
    .windowed-content {
        display: flex;
        flex-direction: column;
        height: auto;
        margin-inline-start: var(--windowed-content-indent-inline-start);
        margin-inline-end: var(--windowed-content-indent-inline-end);
        padding-top: var(--windowed-content-padding-top);
        padding-bottom: var(--windowed-content-padding-bottom);
        padding-inline: var(--windowed-content-padding-inline);
        outline: 1px solid var(--windowed-content-outline-colour);
        outline-offset: -1px;
        pointer-events: all;
    }
    .small-windowed-content {
        max-width: var(--small-windowed-content-max-width);
    }
    .big-windowed-content {
        max-width: var(--big-windowed-content-max-width);
    }
    .default-windowed-content {
        background-color: var(--page-background-colour);
    }
    .aboutPage-windowed-content {
        background-color: var(--windowed-content-aboutPage-background-colour);
    }
    .project-windowed-content {
        background-color: var(--windowed-content-project-background-colour);
    }
    .writing-windowed-content {
        background-color: var(--windowed-content-writing-background-colour);
    }
    .happening-windowed-content {
        background-color: var(--windowed-content-happening-background-colour);
    }
    .resource-windowed-content {
        background-color: var(--windowed-content-resource-background-colour);
    }
    .windowed-content-orbs {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 0.666rem; // arbitrary
        padding-inline: var(--windowed-content-padding-top);
        margin-inline: calc(var(--windowed-content-padding-inline) * -1);
    }
    .windowed-content-orb {
        outline: 1px solid var(--content-orb-outline-colour);
        border-radius: 100%;
        background-color: var(--content-orb-background-colour);
    }
    .windowed-content-orb a {
        display: block;
        width: var(--content-orb-width);
        height: var(--content-orb-width);
    }
    .windowed-content-orb :global(svg) {
        display: block;
        width: 100%;
        height: 100%;
        padding: var(--content-orb-padding);
        @media (any-hover: hover) {
            &:hover {
                color: var(--text-link-hover-colour);
            }
        }
    }
    .switch-content-language :global(svg) {
        fill: currentColor;
    }
    .close-windowed-content :global(svg) {
        stroke-width: 1px;
        stroke: currentColor;
    }
    .close-windowed-content a::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: var(--windowed-content-backdrop-colour);
        opacity: var(--windowed-content-backdrop-opacity);
        z-index: -1;
    }
    .windowed-content-header {
        & {
            display: flex;
            flex-direction: column;
            row-gap: 0.25rem; // arbitrary
        }
        &:lang(ar) {
            line-height: var(--running-text-line-height-arabic);
        }
        &:not(:lang(ar)) {
            line-height: var(--running-text-line-height-non-arabic);
        }
    }
    .windowed-content-header h2 {
        font-weight: 400;
    }
    .windowed-content-orbs + .windowed-content-header {
        margin-top: var(--content-small-gap);
    }
    .windowed-content-header + .content {
        margin-top: var(--content-big-gap);
    }

    .skeleton-subtitle {
        margin-top: var(--content-small-gap);
    }
    .skeleton-text:not(:last-of-type) {
        margin-bottom: var(--content-small-gap);
    }
</style>