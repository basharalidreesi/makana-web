---
import type { CollectionDocumentType, Language, StaticDocumentType } from '@root/sanity/sanity.types';
import type { AlternateDocument } from '@lib/contentUtils';
import { DEFAULT_LANGUAGE_ID, SUPPORTED_LANGUAGES_RECORD, UI_DICTIONARY } from '@lib/languageUtils';

type Props = {
    lang: Language | undefined;
    title: string | undefined;
    type?: CollectionDocumentType | StaticDocumentType | undefined;
    textLength?: number | undefined;
    alternates?: AlternateDocument[] | undefined;
};

const {
    lang = DEFAULT_LANGUAGE_ID,
    title,
    type,
    textLength = 0,
    alternates,
} = Astro.props;

const resolvedSize = textLength >= 1500 ? 'big' : 'small';
---

<div class='windowed-content-container' dir={SUPPORTED_LANGUAGES_RECORD[lang].dir}>
    <div class={['windowed-content', type ? `${type}-windowed-content` : undefined, `${resolvedSize}-windowed-content`].filter(Boolean).join(' ')}>
        <div class='windowed-content-orbs'>
            {Array.isArray(alternates) && alternates.length > 0 && alternates.map((alternate) => {
                const altRoute = alternate.route;
                const altLang = alternate.lang;
                if (!altRoute || !altLang) return;
                return (
                    <div class='windowed-content-orb switch-content-language'>
                        <a href={altRoute} title={UI_DICTIONARY.languageSwitchLabel[altLang]} aria-label={UI_DICTIONARY.languageSwitchLabel[altLang]}>
                            <Fragment set:html={SUPPORTED_LANGUAGES_RECORD[altLang].symbol} />
                        </a>
                    </div>
                );
            })}
            <div class='windowed-content-orb close-windowed-content'>
                <a href='/' title={UI_DICTIONARY.closeButtonLabel[lang]} aria-label={UI_DICTIONARY.closeButtonLabel[lang]}>
                    <svg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'>
                        <line x1='6' y1='6' x2='18' y2='18'/>
                        <line x1='6' y1='18' x2='18' y2='6'/>
                    </svg>
                </a>
            </div>
        </div>
        <div class='windowed-content-header'>
            <h2>
                <bdi>{title || UI_DICTIONARY.untitledLabel[lang]}</bdi>
            </h2>
            <slot name='in-header' />
        </div>
        <slot />
        <div class='windowed-content-footer'>
            <slot name='footer' />
        </div>
    </div>
</div>

<script>
    // TODO initiate skeleton
    // document.addEventListener('astro:before-preparation', () => {
    //     console.log('now');
    // });

    // const navAnchors = document.querySelectorAll('nav a');
    // navAnchors?.forEach((anchor) => { // TODO
    //     anchor.addEventListener('click', () => {
    //         const header = document.querySelector('header');
    //         header?.setAttribute('aria-hidden', 'true');
    //     });
    // });

    // @ts-ignore
    if (!window.isCloseWindowedContentInitialised) {
        // @ts-ignore
        window.isCloseWindowedContentInitialised = true;
        const closeWindowedContentDirectly = () => {
            const windowedContentContainer = document.querySelector('.windowed-content-container');
            if (windowedContentContainer) {
                (windowedContentContainer as HTMLElement).style.setProperty('display', 'none');
            }
            history.pushState({}, '', '/');
            const currentNavAnchor = document.querySelector('.navigation-bar a[aria-current]');
            currentNavAnchor?.removeAttribute('aria-current');
            // const header = document.querySelector('header');
            // header?.setAttribute('aria-hidden', 'false'); // TODO
            console.info('Window was force-closed successfully');
        }
        const attachCloseWindowedContent = () => {
            const windowedContentControlsAnchor = document.querySelector('.close-windowed-content a');
            windowedContentControlsAnchor?.addEventListener('click', (event) => {
                event.preventDefault();
                closeWindowedContentDirectly();
            }, { passive: false, once: true });
        }
        attachCloseWindowedContent();
        document.addEventListener('astro:after-swap', () => {
            attachCloseWindowedContent();
        });
        // @ts-ignore
        window.closeWindowedContentDirectly = closeWindowedContentDirectly;
    }
</script>

<style lang='scss'>
    :global(main) {
        position: relative;
        pointer-events: none;
    }
    .windowed-content-container {
        padding-top: calc(var(--page-padding-top) + var(--windowed-content-container-extra-padding-top));
        padding-bottom: calc(var(--page-padding-bottom) + var(--windowed-content-container-extra-padding-bottom));
        padding-inline-start: calc(var(--page-padding-inline) + var(--windowed-content-container-extra-padding-inline));
        padding-inline-end: calc(var(--page-padding-inline) + var(--windowed-content-container-extra-padding-inline));
    }
    .windowed-content {
        display: flex;
        flex-direction: column;
        height: auto;
        margin-inline-start: var(--windowed-content-indent-inline-start);
        margin-inline-end: var(--windowed-content-indent-inline-end);
        padding-top: var(--windowed-content-padding-top);
        padding-bottom: var(--windowed-content-padding-bottom);
        padding-inline: var(--windowed-content-padding-inline);
        outline: 1px solid var(--windowed-content-outline-colour);
        pointer-events: all;
    }
    .small-windowed-content {
        max-width: var(--small-windowed-content-max-width);
    }
    .big-windowed-content {
        max-width: var(--big-windowed-content-max-width);
    }
    .aboutPage-windowed-content {
        background-color: var(--windowed-content-aboutPage-background-colour);
    }
    .project-windowed-content {
        background-color: var(--windowed-content-project-background-colour);
    }
    .writing-windowed-content {
        background-color: var(--windowed-content-writing-background-colour);
    }
    .happening-windowed-content {
        background-color: var(--windowed-content-happening-background-colour);
    }
    .resource-windowed-content {
        background-color: var(--windowed-content-resource-background-colour);
    }
    .windowed-content-orbs {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 0.5rem; // like --content-small-gap in @components/PageContent.astro
        padding-inline: var(--windowed-content-padding-top);
        margin-inline: calc(var(--windowed-content-padding-inline) * -1);
    }
    .windowed-content-orb {
        outline: 1px solid var(--windowed-content-outline-colour);
        border-radius: 100%;
        background-color: var(--windowed-content-orb-colour);
    }
    .windowed-content-orb a {
        display: block;
        width: var(--windowed-content-orb-width);
        height: var(--windowed-content-orb-width);
    }
    .windowed-content-orb :global(svg) {
        display: block;
        width: 100%;
        height: 100%;
        padding: var(--windowed-content-orb-padding);
        @media (any-hover: hover) {
            &:hover {
                color: var(--text-link-hover-colour);
            }
        }
    }
    .switch-content-language :global(svg) {
        fill: currentColor;
    }
    .close-windowed-content svg {
        stroke-width: 1px;
        stroke: currentColor;
    }
    .close-windowed-content a::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: var(--windowed-content-backdrop-colour);
        opacity: var(--windowed-content-backdrop-opacity);
        z-index: -1;
    }
    .windowed-content-header {
        & {
            display: flex;
            flex-direction: column;
            row-gap: 0.25rem; // arbitrary
            font-weight: 400;
        }
        &:lang(ar) {
            line-height: 1.6; // like --body-line-height-arabic in @components/PageContent.astro
        }
        &:not(:lang(ar)) {
            line-height: 1.5; // like --body-line-height-non-arabic in @components/PageContent.astro
        }
    }
    .windowed-content-orbs + .windowed-content-header {
        margin-top: 0.5rem; // like --content-small-gap in @components/PageContent.astro
    }
    .windowed-content-header + :global(.content) {
        margin-top: 2rem; // like --content-big-gap in @components/PageContent.astro
    }
</style>