---
import type { AnyFeaturableDocument, Language } from '@root/sanity/sanity.types';
import { DEFAULT_LANGUAGE_ID, SUPPORTED_LANGUAGES_IDS, SUPPORTED_LANGUAGES_RECORD } from '@lib/languageUtils';
import { UI_DICTIONARY } from '@lib/uiDictionary';
import { getPreferredSlug, getTitle } from '@lib/contentUtils';
import { generateRoute } from '@lib/routingUtils';
import { createSanityImage } from '@lib/imageUtils';

type Props = {
    lang: Language;
    items: AnyFeaturableDocument[];
};

const {
    lang = DEFAULT_LANGUAGE_ID,
    items,
} = Astro.props;
---

{Array.isArray(items) && items.length > 0 && (
    <aside class='featured-bar' aria-label={UI_DICTIONARY.featuredItemsLabel[lang]} transition:persist='featured-bar'>
        <ul class='featured-list'>
            {items.map((item, index) => {
                if (index > 1) return; // limit to two items
                const slugData = getPreferredSlug(item, lang);
                if (!slugData) return;
                const routeToItem = generateRoute(item, slugData.langUsed);
                if (!routeToItem) return;
                const thumbnail = createSanityImage({
                    source: item.mainImage,
                    width: 1200,
                    height: 800,
                });
                return (
                    <li class='featured-item'>
                        {thumbnail && (
                            <div class='thumbnail'>
                                <Fragment set:html={thumbnail} />
                            </div>
                        )}
                        <div class='title'>
                            <a
                                href={routeToItem}
                                data-action='open-windowed-content'
                                data-action-target-lang={slugData.langUsed}
                                data-action-target-type={item._type}
                                data-action-target-pathname={routeToItem}
                            >
                                {SUPPORTED_LANGUAGES_IDS.map((langId) => {
                                    const itemTitleInLang = getTitle(item, langId, false);
                                    return itemTitleInLang && (
                                        <span lang={langId} dir={SUPPORTED_LANGUAGES_RECORD[langId].dir}>
                                            <bdi>{itemTitleInLang}</bdi>
                                        </span>
                                    );
                                })}
                            </a>
                        </div>
                    </li>
                );
            })}
        </ul>
    </aside>
)}

<style lang='scss'>
    ul, li {
        list-style: none;
    }
    .featured-bar {
        order: 2;
        width: var(--featured-bar-width);
        height: var(--featured-bar-height);
    }
    .featured-list {
        display: flex;
        flex-direction: var(--featured-list-flex-direction);
        align-items: var(--featured-list-flex-align);
        justify-content: var(--featured-list-flex-justify);
        gap: var(--page-gap);
        width: 100%;
        height: 100%;
    }
    .featured-item {
        position: relative;
        display: var(--featured-item-display);
        flex-direction: column;
        row-gap: var(--content-small-gap);
        width: var(--featured-item-max-width);
        height: max-content;
        max-height: 100%;
        padding-top: var(--featured-item-padding-top);
        padding-bottom: var(--featured-item-padding-bottom);
        padding-inline: var(--featured-item-padding-inline);
        border: 1px solid;
        overflow: hidden;
    }
    .featured-list,
    .featured-item {
        min-height: 0;
    }
    a {
        display: flex;
        flex-direction: column;
        text-align: right;
        @media (any-hover: hover) {
            &:hover {
                color: var(--text-link-hover-colour);
            }
        }
    }
    a::before {
        content: '';
        display: block;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    span {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
        line-height: var(--average-text-line-height);
    }
    .thumbnail {
        display: var(--featured-item-thumbnail-display);
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }
    .thumbnail :global(img) {
        height: 100%;
        width: 100%;
        object-fit: cover;
    }
    .title {
        flex: 1;
    }
</style>