---
import type { AboutPage, CollectionDocument, CollectionDocumentType, CounterMap, Happening, Language, Project, Resource, Writing } from '@root/sanity/sanity.types';
import { DEFAULT_LANGUAGE_ID, SUPPORTED_LANGUAGES_ORDERED } from '@lib/languageUtils';
import { generateRoute } from '@lib/routingUtils';
import { UI_DICTIONARY } from '@lib/uiDictionary';
import { filterByLocalisedSlug, getDate, getSlug, getTitle, type DateObject } from '@lib/contentUtils';

type Props = {
    lang: Language;
    currentPath: string;
    items: {
        aboutPage: AboutPage | undefined;
        projects: Project[] | undefined;
        writings: Writing[] | undefined;
        happenings: Happening[] | undefined;
        resources: Resource[] | undefined;
        specialProject_counterMap: CounterMap | undefined;
    };
};

const {
    lang = DEFAULT_LANGUAGE_ID,
    items,
    currentPath,
} = Astro.props;

type ContentCollection = {
    key: CollectionDocumentType;
    docs: CollectionDocument[] | undefined;
};

const contentCollections: ContentCollection[] = [
    {
        key: 'project',
        docs: items.projects,
    },
    {
        key: 'writing',
        docs: items.writings,
    },
    {
        key: 'happening',
        docs: items.happenings,
    },
    {
        key: 'resource',
        docs: items.resources,
    },
];

const hasDocs = (docs: CollectionDocument[] | undefined) => Array.isArray(docs) && docs.length > 0;

const contentCollectionsWithDocs = contentCollections.filter(({ key, docs }) => {
    if (key === 'project' && items.specialProject_counterMap) return true;
    return hasDocs(docs);
});

const baseMenuItemsCount = items.aboutPage ? 1 : 0;

const dynamicMenuItemsCount = contentCollectionsWithDocs.length;

const MINIMUM_MENU_ITEMS_COUNT = baseMenuItemsCount + dynamicMenuItemsCount;
---

<Fragment set:html={`<style>:root{--how-many-menu-items:${MINIMUM_MENU_ITEMS_COUNT};--navigation-menu-height:calc(var(--how-many-menu-items)*var(--menu-item-height));}</style>`} />

<div class='navigation-bar' transition:persist='navigation-bar'>
    {SUPPORTED_LANGUAGES_ORDERED.map((supportedLang) => {
        const langId = supportedLang.id;
        const langDir = supportedLang.dir;
        const routeToAboutPage = items.aboutPage?.slug?.[langId]?.current && generateRoute(items.aboutPage, langId);
        const aboutPageTitle = items.aboutPage?.title?.[langId] || UI_DICTIONARY.aboutPage[langId];
        const routeToCounterMap = items.specialProject_counterMap?.slug?.[langId]?.current && generateRoute(items.specialProject_counterMap, langId);
        const counterMapTitle = items.specialProject_counterMap?.title?.[langId] || UI_DICTIONARY.specialProject_counterMap[langId];
        const counterMapDate: DateObject = {
            iso: getDate(items.specialProject_counterMap, 'iso', langId),
            compact: getDate(items.specialProject_counterMap, 'compact', langId),
            readable: getDate(items.specialProject_counterMap, 'readable', langId),
        };
        return (
            <section lang={langId} dir={langDir}>
                <nav aria-label={UI_DICTIONARY.navigationMenuLabel[langId]}>
                    <ul class='navigation-menu'>
                        {items.aboutPage && (
                            <li class='navigation-menu-item static-navigation-item'>
                                {routeToAboutPage ? (
                                    <a
                                        href={routeToAboutPage}
                                        aria-current={routeToAboutPage === currentPath ? 'page' : undefined}
                                        data-action='open-windowed-content'
                                        data-action-target-lang={langId}
                                        data-action-target-type={items.aboutPage._type}
                                        data-action-target-pathname={routeToAboutPage}
                                    >
                                        <bdi>{aboutPageTitle}</bdi>
                                    </a>
                                ) : (
                                    <a role='link' aria-disabled='true' tabindex='-1' onclick='return false;'>
                                        <bdi>{aboutPageTitle}</bdi>
                                    </a>
                                )}
                            </li>
                        )}
                        {contentCollectionsWithDocs.map(({ key, docs }) => {
                            const localisedItems = (filterByLocalisedSlug(docs, langId) as CollectionDocument[]) || [];
                            const itemsExist = hasDocs(localisedItems);
                            const sectionTitle = UI_DICTIONARY[key][langId];
                            const delta = MINIMUM_MENU_ITEMS_COUNT - localisedItems.length;
                            const buttonId = `nav-${key}-button-${langId}`;
                            const submenuId = `nav-${key}-submenu-${langId}`;
                            return (
                                <li class='navigation-menu-item collection-navigation-item'>
                                    {itemsExist ? (
                                        <button
                                            id={buttonId}
                                            type='button'
                                            aria-expanded='false'
                                            aria-controls={submenuId}
                                            data-action='expand-or-collapse-navigation-submenu'
                                            data-action-origin-id={buttonId}
                                            data-action-prevent-default='true'
                                        >
                                            <bdi>{sectionTitle}</bdi>
                                        </button>
                                        <ul id={submenuId} class='navigation-submenu' aria-hidden='true' hidden tabindex='-1'>
                                            {key === 'project' && items.specialProject_counterMap && routeToCounterMap && (
                                                <li class='navigation-submenu-item static-navigation-item'>
                                                    <a
                                                        href={routeToCounterMap}
                                                        aria-current={routeToCounterMap === currentPath ? 'page' : undefined}
                                                        data-action='open-superposed-content'
                                                        data-action-target-lang={langId}
                                                        data-action-target-pathname={routeToCounterMap}
                                                    >
                                                        <span class='time'>
                                                            <time {...(counterMapDate.iso && counterMapDate.readable ? { datetime: counterMapDate.iso, 'aria-label': counterMapDate.readable } : { role: 'presentation', 'aria-hidden': 'true' })}>
                                                                <bdi>{counterMapDate.compact || UI_DICTIONARY.datePlaceholder}</bdi>
                                                            </time>
                                                        </span>
                                                        <span class='title'>
                                                            <bdi>{counterMapTitle}</bdi>
                                                        </span>
                                                    </a>
                                                </li>
                                            )}
                                            {localisedItems.map((item) => {
                                                const itemSlug = getSlug(item, langId);
                                                const itemTitle = getTitle(item, langId);
                                                const itemDate: DateObject | undefined = 'date' in item ? {
                                                    iso: getDate(item, 'iso', langId),
                                                    compact: getDate(item, 'compact', langId),
                                                    readable: getDate(item, 'readable', langId),
                                                } : undefined;
                                                const routeToItem = itemSlug && generateRoute(item, langId);
                                                if (!routeToItem) return;
                                                return (
                                                    <li class='navigation-submenu-item static-navigation-item'>
                                                        <a
                                                            href={routeToItem}
                                                            aria-current={routeToItem === currentPath ? 'page' : undefined}
                                                            data-action='open-windowed-content'
                                                            data-action-target-lang={langId}
                                                            data-action-target-type={item._type}
                                                            data-action-target-pathname={routeToItem}
                                                        >
                                                            {itemDate && (
                                                                <span class='time'>
                                                                    <time {...(itemDate.iso && itemDate.readable ? { datetime: itemDate.iso, 'aria-label': itemDate.readable } : { role: 'presentation', 'aria-hidden': 'true' })}>
                                                                        <bdi>{itemDate.compact || UI_DICTIONARY.datePlaceholder}</bdi>
                                                                    </time>
                                                                </span>
                                                            )}
                                                            <span class='title'>
                                                                <bdi>{itemTitle}</bdi>
                                                            </span>
                                                        </a>
                                                    </li>
                                                );
                                            })}
                                            {delta > 0 && [...Array(delta)].map(() => (
                                                <li class='navigation-submenu-item' aria-hidden='true' role='presentation'></li>
                                            ))}
                                        </ul>
                                    ) : (
                                        <button type='button' aria-disabled='true' disabled>
                                            <bdi>{sectionTitle}</bdi>
                                        </button>
                                    )}
                                </li>
                            );
                        })}
                    </ul>
                </nav>
            </section>
        );
    })}
</div>

<script>
    // Handlers to preserve scroll position within expanded navigation submenus
    let scrollPosition: number | null = null;
    document.addEventListener('astro:before-preparation', () => {
        const currentMenu = document.querySelector(`.navigation-submenu[aria-hidden='false']`);
        if (!currentMenu) return;
        scrollPosition = currentMenu.scrollTop;
    });
    document.addEventListener('astro:after-swap', () => {
        const currentMenu = document.querySelector(`.navigation-submenu[aria-hidden='false']`);
        if (!currentMenu || !scrollPosition) return;
        currentMenu.scrollTop = scrollPosition;
    });
</script>

<style lang='scss'>
    @use '@styles/mixins.scss';

    .navigation-bar {
        position: relative;
        order: 1;
        display: flex;
        margin-top: var(--navigation-menu-margin-top);
    }
    .navigation-bar::after {
        content: '';
        position: absolute;
        display: block;
        top: -1.5px;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--page-background-colour);
    }
    .navigation-bar section {
        flex: 1 0 0;
    }
    .navigation-bar ul, .navigation-bar li {
        list-style: none;
    }
    .navigation-menu {
        background-color: var(--navigation-menu-background-colour);
    }
    .navigation-submenu {
        position: absolute;
        top: 0;
        inset-inline-start: var(--navigation-submenu-indent-inline-start);
        inset-inline-end: var(--navigation-submenu-indent-inline-end);
        height: calc((var(--how-many-menu-items) * var(--menu-item-height)) + 1px);
        overflow-y: auto;
        background-color: var(--navigation-submenu-background-colour);
        @include mixins.no-scrollbar;
    }
    .navigation-menu-item, .navigation-submenu-item {
        height: var(--menu-item-height);
        border-bottom: 1px solid var(--text-default-colour);
        white-space: nowrap;
    }
    .navigation-menu-item a, .navigation-menu-item button {
        max-width: var(--navigation-submenu-indent-inline-start);
    }
    .navigation-submenu-item .time {
        display: var(--navigation-submenu-date-display);
        margin-inline-end: var(--navigation-submenu-date-title-gap);
    }
    .navigation-submenu-item .title {
        text-overflow: ellipsis;
        overflow: hidden;
        padding-block: 8px; // arbitrary to fix vertical clipping
        margin-block: -8px; // same amount but negative
    }
    .navigation-submenu-item a {
        max-width: 100%;
    }
    .navigation-submenu {
        scroll-snap-type: y mandatory;
        scroll-snap-stop: normal;
        padding-bottom: 1px;
        scroll-padding-bottom: 1px;
    }
    .navigation-submenu-item {
        scroll-snap-align: end;
    }
    .static-navigation-item a {
        display: flex;
    }
    .collection-navigation-item button {
        display: block;
    }
    .static-navigation-item a,
    .collection-navigation-item button {
        padding-block: var(--menu-item-padding-block);
        width: max-content;
    }
    .static-navigation-item a[aria-current] {
        font-weight: 400;
    }
    .collection-navigation-item button[aria-expanded='true'] {
        font-weight: 400;
    }
    .static-navigation-item a[aria-disabled='true'],
    .collection-navigation-item button[aria-disabled='true'] {
        color: var(--text-disabled-colour);
        cursor: not-allowed;
    }
    .navigation-menu-item a:not([aria-disabled='true']),
    .navigation-menu-item button:not([aria-disabled='true']) {
        cursor: pointer;
        @media (any-hover: hover) {
            &:hover {
                color: var(--text-link-hover-colour);
            }
        }
    }
</style>